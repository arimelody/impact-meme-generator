let meme_img = document.getElementById('meme-img');
let upload_button = document.getElementById('upload-image');
let fit_button = document.getElementById('change-fit');
let screenshot_button = document.getElementById('take-screenshot');

let flash_enabled = true;
let ui_enabled = true;
let toggle_ui_enabled = true;

const image_constraints = [ 'cover', 'contain', 'stretch' ];
let current_fit = meme_img.classList.item(0);

/**
 * changes the background image to one of the user's choosing!
 * @param {string} url a link to the image!
 */
function set_image(url) {
    meme_img.style.backgroundImage = `url(${url})`;
    meme_img.hidden = false;
}

/**
 * changes the `background-size` attribute to any of the three
 * available parameters: `cover`, `contain` and `stretch`!
 * 
 * also updates any relevant buttons.
 */
function change_fit() {
    fit_button.classList.add('active');
    setTimeout(() => {
        fit_button.classList.remove('active');
    }, 500);

    let index = image_constraints.indexOf(current_fit);
    index++;
    if (index >= image_constraints.length) index = 0;
    current_fit = image_constraints[index];
    
    meme_img.className = current_fit;

    const button_image = fit_button.querySelector('img');
    button_image.src = `/img/fit-${current_fit}.svg`;
    button_image.alt = `change image fit (${current_fit})`;
    fit_button.title = `Change Image Fit (${current_fit.replace(/(^.)/g, match => match.toUpperCase())})`;
}

/**
 * toggles the ui! pretty self-explanatory.
 */
function toggle_ui() {
    ui_enabled = !ui_enabled;
    if (ui_enabled) {
        document.querySelector('#controls').classList.remove('hide');
        document.querySelector('footer').classList.remove('hide');
        document.querySelector('#pride-flag').classList.remove('hide');
    } else {
        document.querySelector('#controls').classList.add('hide');
        document.querySelector('footer').classList.add('hide');
        document.querySelector('#pride-flag').classList.add('hide');
    }
}

/**
 * uses html2canvas to take a screenshot! only captures the image and caption text.
 */
function screenshot() {
    html2canvas(document.querySelector('main'), {
        logging: false,
        useCORS: true
    }).then(canvas => {
        let data = canvas.toDataURL('png');
        console.log("screenshot url: " + data);

        let img = document.createElement('img');
        img.id = "screenshot";
        img.src = data;
        img.alt = "image generated by impact meme generator";

        if (flash_enabled) flash();
        
        // click on the image to open it in a new tab!
        img.addEventListener('click', (event) => {
            let new_tab = window.open();
            new_tab.document.write("<!DOCTYPE html>" + `<img src="${data}" alt="image generted by impact meme generator">`);
            new_tab.document.close();
        });
        
        let print_delay = 500;
        if (!flash_enabled) print_delay = 0;
        
        // put the screenshot on screen!
        setTimeout(() => { document.body.appendChild(img); }, print_delay);

        // clear screenshots in 4s!
        setTimeout(() => { clear_screenshots(); }, 4000);
    });
}

/**
 * sends all currently visible screenshot previews packing!
 */
function clear_screenshots() {
    const screenshots = document.querySelectorAll('#screenshot');
    screenshots.forEach(screenshot => {
        screenshot.classList.add('leaving');
        setTimeout(() => {
            screenshot.remove();
        }, 1000);
    });
}

/**
 * creates a camera flash effect (useful for screenshots!)
 */
function flash() {
    let flashbox = document.createElement('div');
    flashbox.id = "flash";
    document.body.appendChild(flashbox);
    setTimeout(() => {
        flashbox.remove();
    }, 200);
}

// CHANGING IMAGES

upload_button.addEventListener('click', () => { upload_button.click() });
fit_button.addEventListener('click', () => { change_fit(); });
screenshot_button.addEventListener('click', () => { screenshot() });

upload_button.addEventListener('change', () => {
    const reader = new FileReader();
    reader.addEventListener('load', () => {
        const uploaded_image = reader.result;
        // meme_img.src = uploaded_image;
        set_image(uploaded_image);
    });
    reader.readAsDataURL(upload_button.files[0]);
});

// TOGGLE UI BIND

document.addEventListener('keydown', (event) => {
    if (event.key != 'h') return;
    if (!toggle_ui_enabled) return;
    toggle_ui();
});

// DON'T TOGGLE IF THE USER IS TYPING!

document.querySelectorAll('.impact').forEach(text => {
    text.addEventListener('focus', () => {
        toggle_ui_enabled = false;
    });
    text.addEventListener('focusout', () => {
        toggle_ui_enabled = true;
    });
});